CSCC85 - Embedded Systems

Project 2 - Lander Control
______________________________________________________________________

Team name: Paco Bell

Name 1 (last, first): Usmani, Faisal
Student number 1: 999003867

Name 2 (last, first): Ma, Kenneth
Student number 2: 995444675

Name 3 (last, first):
Student number 3: 999071917

(special: Lose marks for not completing the above information)
_______________________________________________________________________

Please note below what parts of your task were completed, and for
incomplete tasks, give a brief description of progress and how
you think the task could be completed

a) The program can land the craft safely in mode '1'
  
   - for the 'easy.ppm' map (yes/no) yes
   - for the 'hard.ppm' map (yes/no) yes

   If it fails, describe the conditions in which it fails and how
   you think this could be resolved

b) The program can land the craft safely in mode '2'
  
   - for the 'easy.ppm' map (yes/no) yes
   - for the 'hard.ppm' map (yes/no) yes

   If it fails, describe the conditions in which it fails and how
   you think this could be resolved


_______________________________________________________________________

Questions:

1) What was the impact of having noisy sensors in your ability to
   determine the state of the craft and ultimately control it 
   properly?
   For position we had to specify a range to adjust our position instead of a specific value.
   For our angle we had to constantly re-adjust ourselves.

2) Describe the technique(s) you used to deal with sensor noise
   To deal with sensor noise, we take an average of a bunch of samples.
   We model our position and velocity sensors from the very beginning based on the same methods that are used if the sensors fail.

3) Describe your strategy for dealing with thruster failures
   We're selecting the closest working thruster, then rotating the lander so that the working thruster replaces the failed thruster.

4) Describe your strategy for dealing with sensor malfunctions:
   - Position sensors
        At the beginning, all the sensors are working, so we take the initial reading to the x and y position and we keep updating those values.
        We take the velocity and integrate it (discretely) to keep track of the x and y position.
   - Velocity sensors
        At the beginning, all sensors are working, so we take the initial reading for the x and y velocity and we keep updating those values.
        We use the angle sensor in conjuction with one working thruster; We know the power that we give the thruster at all times so we can keep track of the acceleration. We break up the acceleration into x and y components and then we can integrate the acceleration (discretely) to get the velocity.
   - Angle
        We take an initial reading for angle. Given that our maximum rotate rate per frame is about 4.3 degrees, we just increment the initial reading based on how much we rotate.
   - Sonar
        2 ways of dealing with it.
        1) Take a sonar reading the beginning since the sonar should be working. Cache the initial sonar readings and then use the rangefinder periodically update the corresponding sonar slice to the angle that the laser is when reading.
        2) Use the laser to do a 360 degree scan and keep track of the distance of objects in every direction.

   What if you have multiple failures? what could you do if, for
   example both position and velocity sensors became inoperative?
   Because everything is wrapped in robust functions, position will never fail since we're calculating this ourselves as above. Velocity depends on the actual velocity sensor or our substituted version that uses the position so this won't fail either. But note, it may be inaccurate since we're guessing where we are based on our initial position. The longer it takes to land, the more inaccurate the guess would be.

5) What was the hardest failure type to deal with (i.e. which is
   the component, either sensor or control that makes the lander
   harder to handle?)?
   Sonar is the hardest failure because you will never be able to maintain your x and y position while you use the laser to scan 360 degrees, you'll drop while rotating, making your scan slightly inaccurate.
6) Assume a human pilot was in charge of controlling the craft 
   (i.e. the pilot has control of thrusters and rotation).
   How would you change Safety_Override() so that it prevents
   the pilot from accidentally crashing the lander?
   When Safety_Override() gets executed, we'd disable all the controls so that the pilot cannot overwrite any of the commands because that would cause more issues. But we should also have a manual override button that lets you override the safety override temporarily for a few minutes; they can extend it by pressing the button again within that time period.

7) Do you think it is reasonable to write such a control function?
   (i.e. a routine that takes control from a human for their
    own safety)
    Yes, but to a certain degree; Only if it's absolutely required (i.e. danger is immenent). 
    Yes because we still give them the temporary override just incase the pilot feels that the computer is malfunctioning or that they can do a better job than the computer.

8) Should the pilot be aware that this software is present?
   (yes or no, and tell me why you think so!)
   Yes he should know that the software is present because if the routine takes control from a human for their own safety, 
   the human might panic and think that something's wrong with the program and would try to regain control (which might put him/her into danger).

9) Would you buy/drive a car that you know has control software
   that will take control from you if it estimates you are
   doing something dangerous?
   Yes because the software is more likely to keep everyone in the car safe.

10) Can you as an embedded systems designer think of every 
    possible scenario that could go wrong so as to write 
    control software that ALWAYS works?
    Hardware might degrade over time so the calculations done by the control software may not be as accurate as they should be.
    Noise might be different in some environments compared to others, which also skews some calculations done by the control software.
    There may even be a bug in the software that was never detected before and might take control of the system even in a non-dangerous situation.
    No matter what you do, you will not be able to replicate all real situations, there are infinitely many cases.
    For example, what if everything fails? 

    Think about that... 
    Okay...
________________________________________________________________

Grading:

- Answers in this REPORT			/10
- Software to land craft in mode '1'		/40
- Software to land craft in mode '2'		/45
- Style and coding structure			/5

Total for Project #3				/100 (*)

(*) Mark is conditional on all members of the team being able
    to explain any component of the solution when asked.
